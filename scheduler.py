import os, asyncio
from dotenv import load_dotenv
from telethon import TelegramClient

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from twitter_scanner import scan_twitter
from scoring        import score_account

load_dotenv()

from logger_config import setup_logger
logger = setup_logger(__name__)

BOT_TOKEN   = os.getenv('TELEGRAM_BOT_TOKEN')
API_ID      = int(os.getenv('TELEGRAM_API_ID'))
API_HASH    = os.getenv('TELEGRAM_API_HASH')
CHAT_ID     = int(os.getenv('TELEGRAM_CHAT_ID'))

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...')
client = TelegramClient('ecwbot-sched', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

async def daily_task():
    logger.info('–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: scan_twitter()')
    try:
        accounts = scan_twitter()
        logger.info('scan_twitter –≤–µ—Ä–Ω—É–ª %d –∑–∞–ø–∏—Å–µ–π', len(accounts))
        good = [acc for acc in accounts if score_account(acc) >= 4]
        logger.info('%d –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Å–∫–æ—Ä–∏–Ω–≥–∞', len(good))

        if not good:
            text = '–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç.'
        else:
            texts = [
                f"üî∏ @{acc['username']} (Score: {score_account(acc)})\n"
                #f"{acc['profile_url']}\n{acc['bio']}"
                for acc in good
            ]
            text = '\n\n'.join(texts)[:4000]

        await client.send_message(CHAT_ID, text)
        logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç %s', CHAT_ID)

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏:')
        # –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥

def main():
    sched = AsyncIOScheduler()
    # 06:00 UTC = 09:00 EET
    sched.add_job(lambda: asyncio.create_task(daily_task()),
                  'cron', hour=6, minute=0)
    sched.start()
    logger.info('Scheduler –∑–∞–ø—É—â–µ–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 06:00 UTC')
    client.run_until_disconnected()

if __name__ == '__main__':
    main()