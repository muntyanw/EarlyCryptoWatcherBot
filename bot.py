import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events

from twitter_scanner import scan_twitter
from scoring        import score_account

load_dotenv()

from logger_config import setup_logger
logger = setup_logger(__name__)

import debugpy
debugpy.listen(("0.0.0.0", 5678))  # –∏–ª–∏ ("localhost", 5678)
print("‚è≥ Waiting for debugger attach...")
debugpy.wait_for_client()

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_ID    = int(os.getenv('TELEGRAM_API_ID'))
API_HASH  = os.getenv('TELEGRAM_API_HASH')

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramClient...')
client = TelegramClient('ecwbot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –ø–æ–ª—É—á–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
me = client.loop.run_until_complete(client.get_me())
logger.info('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–¥ @%s (id=%s)', me.username, me.id)

@client.on(events.NewMessage(pattern='/start'))
async def handler_start(event):
    user = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç %s', user)
    await event.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scan –¥–ª—è –ø–æ–∏—Å–∫–∞.')

@client.on(events.NewMessage(pattern='/scan'))
async def handler_scan(event):
    user = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /scan –æ—Ç %s', user)

    await event.reply('üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Twitter‚Ä¶')
    try:
        accounts = scan_twitter()
        logger.info('scan_twitter –≤–µ—Ä–Ω—É–ª %d –∑–∞–ø–∏—Å–µ–π', len(accounts))
        good = [acc for acc in accounts if score_account(acc) >= 4]
        logger.info('–ü–æ—Å–ª–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å %d –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', len(good))

        if not good:
            await event.reply('‚ùå –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return

        parts = []
        for acc in good:
            text = (
                f"üî∏ @{acc['username']} (Score: {score_account(acc)})\n"
                f"{acc['profile_url']}\n{acc['bio']}"
            )
            parts.append(text)
        message = '\n\n'.join(parts)[:4000]

        await event.reply(message)
        logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å %d –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏', len(good))

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ /scan:')
        await event.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.')

def main():
    logger.info('–ó–∞–ø—É—Å–∫–∞–µ–º EarlyCryptoWatcherBot (Telethon)')
    logger.info('EarlyCryptoWatcherBot (Telethon) —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã ...')
    client.run_until_disconnected()

if __name__ == '__main__':
    main()