import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from twitter_scanner import command_scan
from mongo import save_subscriber, get_all_subscribers
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.executors.asyncio import AsyncIOExecutor
import pytz

load_dotenv()

from logger_config import setup_logger
logger = setup_logger(__name__)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_ID    = int(os.getenv('TELEGRAM_API_ID'))
API_HASH  = os.getenv('TELEGRAM_API_HASH')
SHEDULER_HOUR  = os.getenv('SHEDULER_HOUR')
SHEDULER_MINUTE  = os.getenv('SHEDULER_MINUTE')
TIMEZONE  = os.getenv('TIMEZONE')

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramClient...')
client = TelegramClient('ecwbot', API_ID, API_HASH)

@client.on(events.NewMessage(pattern='/start'))
async def handler_start(event):
    user = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç %s', user)
    await event.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scan –¥–ª—è –ø–æ–∏—Å–∫–∞.')

@client.on(events.NewMessage(pattern='/subscribe'))
async def handler_subscribe(event):
    sender_id = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /subscribe –æ—Ç %s', sender_id)
    save_subscriber(sender_id,{})
    await event.reply('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')


@client.on(events.NewMessage(pattern='/scan'))
async def handler_scan(event):
    user = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /scan –æ—Ç %s', user)
    await command_scan(client)

    
async def broadcast_to_subscribers(client: TelegramClient, message: str) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
    """
    subscribers = get_all_subscribers()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—ã –≤ —Å–ø–∏—Å–æ–∫
    tasks = [
        send_message_to_user(client, sub["telegram_id"], message)
        for sub in subscribers
    ]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏ –∂–¥—ë–º –≤—Å–µ—Ö
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–ª—ã
    for sub, res in zip(subscribers, results):
        if isinstance(res, Exception):
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {sub['telegram_id']}: {res}")

        
async def send_message_to_user(client, user_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —á–∞—Ç—É –ø–æ –µ–≥–æ user_id/chat_id.
    """
    try:
        await client.send_message(entity=user_id, message=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}: {text!r}")
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


def main():
    logger.info('–ó–∞–ø—É—Å–∫–∞–µ–º bot‚Ä¶')
    client.start(bot_token=BOT_TOKEN)  
     # –ø–æ–ª—É—á–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
    me = client.loop.run_until_complete(client.get_me())
    logger.info('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–¥ @%s (id=%s)', me.username, me.id)
    
    # –∑–¥–µ—Å—å Telethon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç client.loop
    sched = AsyncIOScheduler(
        event_loop=client.loop,
        timezone=pytz.timezone(TIMEZONE),
        executors={'default': AsyncIOExecutor()}
    )
    sched.add_job(
        command_scan,                     # async def command_scan(client)
        'cron',
        hour=SHEDULER_HOUR,
        minute=SHEDULER_MINUTE,
        kwargs={'client': client}
    )
    sched.start()                                  # —Ç–µ–ø–µ—Ä—å –Ω–∞–π–¥—ë—Ç client.loop –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    logger.info(f'Scheduler –∑–∞–ø—É—â–µ–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {SHEDULER_HOUR}:{SHEDULER_MINUTE} UTC')

    client.run_until_disconnected()                # —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ü–∏–∫–ª client.loop

if __name__ == '__main__':
    import debugpy
    debugpy.listen(("0.0.0.0", 5678))  # –∏–ª–∏ ("localhost", 5678)
    print("‚è≥ Waiting for debugger attach...")
    debugpy.wait_for_client()

    main()