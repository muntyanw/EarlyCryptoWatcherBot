import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from datetime import datetime
from twitter_scanner import scan_twitter
from scoring        import score_account
from mongo import save_subscriber, get_all_subscribers, save_user_good
import asyncio

load_dotenv()

from logger_config import setup_logger
logger = setup_logger(__name__)

import debugpy
debugpy.listen(("0.0.0.0", 5678))  # –∏–ª–∏ ("localhost", 5678)
print("‚è≥ Waiting for debugger attach...")
debugpy.wait_for_client()

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_ID    = int(os.getenv('TELEGRAM_API_ID'))
API_HASH  = os.getenv('TELEGRAM_API_HASH')
SCORE_MIN = int(os.getenv('SCORE_MIN', 0))

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramClient...')
client = TelegramClient('ecwbot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –ø–æ–ª—É—á–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
me = client.loop.run_until_complete(client.get_me())
logger.info('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–¥ @%s (id=%s)', me.username, me.id)

@client.on(events.NewMessage(pattern='/start'))
async def handler_start(event):
    user = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç %s', user)
    await event.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scan –¥–ª—è –ø–æ–∏—Å–∫–∞.')

@client.on(events.NewMessage(pattern='/subscribe'))
async def handler_subscribe(event):
    sender_id = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /subscribe –æ—Ç %s', sender_id)
    save_subscriber(sender_id,{})
    await event.reply('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')


@client.on(events.NewMessage(pattern='/scan'))
async def handler_scan(event):
    user = event.sender_id
    logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /scan –æ—Ç %s', user)

    await event.reply('üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Twitter‚Ä¶')
    try:
        tws = scan_twitter()
        if len(tws) == 0:
            await event.reply('‚ùå –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return
        
        logger.info('scan_twitter –≤–µ—Ä–Ω—É–ª %d –∑–∞–ø–∏—Å–µ–π', len(tws))
        await event.reply(f'scan_twitter –≤–µ—Ä–Ω—É–ª {len(tws)} –∑–∞–ø–∏—Å–µ–π')

        good = []
        for tw in tws:
            tw = score_account(tw)
            logger.info(f"–û—Ü–µ–Ω–∫–∞ @{tw['username']}: {tw['score']}")
            if tw['score'] >= SCORE_MIN:
                good.append(tw)
                save_user_good(tw["username"], tw)

        logger.info('–ü–æ—Å–ª–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å %d –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', len(good))
        await event.reply(f'–ü–æ—Å–ª–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {len(good)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤')

        if not good:
            await event.reply('‚ùå –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return

        parts = []
        for tw in good:
            text = (
                f"–ü—Ä–æ–µ–∫—Ç: @{tw['username']} (—Å–æ–∑–¥–∞–Ω {tw['created'].strftime('%d.%m.%Y %H:%M')})\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {tw['score']}/10\n"
                f"Bio: {tw['bio']}\n"
                f"–¢–≤–∏—Ç–æ–≤: {tw['tweets_count']} | –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {tw['followers_count']}\n"
                f"{'–°—Å—ã–ª–∫–∏: ' + ', '.join(tw['urls']) if len(tw.get('urls',[]))>0 else ''}\n\n"
            )
            parts.append(text)
        message = '\n\n'.join(parts)[:4000]

        await event.reply(message)
        
        await broadcast_to_subscribers(message)
        
        logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å %d –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏', len(good))

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ /scan:')
        await event.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.')
 
async def broadcast_to_subscribers(message: str) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
    """
    subscribers = get_all_subscribers()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—ã –≤ —Å–ø–∏—Å–æ–∫
    tasks = [
        send_message_to_user(sub["telegram_id"], message)
        for sub in subscribers
    ]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏ –∂–¥—ë–º –≤—Å–µ—Ö
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–ª—ã
    for sub, res in zip(subscribers, results):
        if isinstance(res, Exception):
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {sub['telegram_id']}: {res}")

        
async def send_message_to_user(user_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —á–∞—Ç—É –ø–æ –µ–≥–æ user_id/chat_id.
    """
    try:
        await client.send_message(entity=user_id, message=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}: {text!r}")
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


def main():
    logger.info('–ó–∞–ø—É—Å–∫–∞–µ–º EarlyCryptoWatcherBot (Telethon)')
    logger.info('EarlyCryptoWatcherBot (Telethon) —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã ...')
    client.run_until_disconnected()

if __name__ == '__main__':
    main()